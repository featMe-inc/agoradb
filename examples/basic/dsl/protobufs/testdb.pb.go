// Code generated by protoc-gen-go. DO NOT EDIT.
// source: testdb.proto

package protobufs

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SaveUserRequest struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveUserRequest) Reset()         { *m = SaveUserRequest{} }
func (m *SaveUserRequest) String() string { return proto.CompactTextString(m) }
func (*SaveUserRequest) ProtoMessage()    {}
func (*SaveUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8641b6e3fb21f41, []int{0}
}

func (m *SaveUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveUserRequest.Unmarshal(m, b)
}
func (m *SaveUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveUserRequest.Marshal(b, m, deterministic)
}
func (m *SaveUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveUserRequest.Merge(m, src)
}
func (m *SaveUserRequest) XXX_Size() int {
	return xxx_messageInfo_SaveUserRequest.Size(m)
}
func (m *SaveUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveUserRequest proto.InternalMessageInfo

func (m *SaveUserRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type SaveUserResponse struct {
	Value                string   `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Counter              int32    `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveUserResponse) Reset()         { *m = SaveUserResponse{} }
func (m *SaveUserResponse) String() string { return proto.CompactTextString(m) }
func (*SaveUserResponse) ProtoMessage()    {}
func (*SaveUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8641b6e3fb21f41, []int{1}
}

func (m *SaveUserResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveUserResponse.Unmarshal(m, b)
}
func (m *SaveUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveUserResponse.Marshal(b, m, deterministic)
}
func (m *SaveUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveUserResponse.Merge(m, src)
}
func (m *SaveUserResponse) XXX_Size() int {
	return xxx_messageInfo_SaveUserResponse.Size(m)
}
func (m *SaveUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SaveUserResponse proto.InternalMessageInfo

func (m *SaveUserResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *SaveUserResponse) GetCounter() int32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func init() {
	proto.RegisterType((*SaveUserRequest)(nil), "testdb.SaveUserRequest")
	proto.RegisterType((*SaveUserResponse)(nil), "testdb.SaveUserResponse")
}

func init() { proto.RegisterFile("testdb.proto", fileDescriptor_b8641b6e3fb21f41) }

var fileDescriptor_b8641b6e3fb21f41 = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x49, 0x2d, 0x2e,
	0x49, 0x49, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xd4, 0xb9, 0xf8,
	0x83, 0x13, 0xcb, 0x52, 0x43, 0x8b, 0x53, 0x8b, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84,
	0x44, 0xb8, 0x58, 0xcb, 0x12, 0x73, 0x4a, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x20,
	0x1c, 0x25, 0x27, 0x2e, 0x01, 0x84, 0xc2, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x90, 0xca, 0x30,
	0x64, 0x95, 0x60, 0x8e, 0x90, 0x04, 0x17, 0x7b, 0x72, 0x7e, 0x69, 0x5e, 0x49, 0x6a, 0x91, 0x04,
	0x93, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x8c, 0x6b, 0xb4, 0x88, 0x89, 0x8b, 0x05, 0x64, 0x80, 0x90,
	0x35, 0x17, 0x0b, 0xc8, 0x30, 0x21, 0x71, 0x3d, 0xa8, 0xa3, 0xd0, 0xdc, 0x20, 0x25, 0x81, 0x29,
	0x01, 0xb1, 0x53, 0x89, 0x41, 0xc8, 0x13, 0xe2, 0x12, 0xe7, 0x9c, 0xcc, 0xd4, 0xbc, 0x92, 0xe0,
	0x92, 0xa2, 0xd4, 0xc4, 0x5c, 0xb2, 0x0c, 0xd2, 0x60, 0x84, 0x19, 0x15, 0x9c, 0x5a, 0x54, 0x96,
	0x5a, 0x44, 0x81, 0x51, 0x06, 0x8c, 0x42, 0xee, 0x5c, 0x3c, 0x20, 0x71, 0xa7, 0x4c, 0x8a, 0x5c,
	0x64, 0xc0, 0xe8, 0xc4, 0x1d, 0xc5, 0x09, 0x8e, 0xa2, 0xa4, 0xd2, 0xb4, 0xe2, 0x24, 0x36, 0x30,
	0xd3, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xae, 0x96, 0xe4, 0xa5, 0xbd, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClient interface {
	Save(ctx context.Context, in *SaveUserRequest, opts ...grpc.CallOption) (*SaveUserResponse, error)
	SaveClientStream(ctx context.Context, opts ...grpc.CallOption) (User_SaveClientStreamClient, error)
	SaveServerStream(ctx context.Context, in *SaveUserRequest, opts ...grpc.CallOption) (User_SaveServerStreamClient, error)
	SaveBiStream(ctx context.Context, opts ...grpc.CallOption) (User_SaveBiStreamClient, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) Save(ctx context.Context, in *SaveUserRequest, opts ...grpc.CallOption) (*SaveUserResponse, error) {
	out := new(SaveUserResponse)
	err := c.cc.Invoke(ctx, "/testdb.User/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SaveClientStream(ctx context.Context, opts ...grpc.CallOption) (User_SaveClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_User_serviceDesc.Streams[0], "/testdb.User/SaveClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userSaveClientStreamClient{stream}
	return x, nil
}

type User_SaveClientStreamClient interface {
	Send(*SaveUserRequest) error
	CloseAndRecv() (*SaveUserResponse, error)
	grpc.ClientStream
}

type userSaveClientStreamClient struct {
	grpc.ClientStream
}

func (x *userSaveClientStreamClient) Send(m *SaveUserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userSaveClientStreamClient) CloseAndRecv() (*SaveUserResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SaveUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) SaveServerStream(ctx context.Context, in *SaveUserRequest, opts ...grpc.CallOption) (User_SaveServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_User_serviceDesc.Streams[1], "/testdb.User/SaveServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userSaveServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type User_SaveServerStreamClient interface {
	Recv() (*SaveUserResponse, error)
	grpc.ClientStream
}

type userSaveServerStreamClient struct {
	grpc.ClientStream
}

func (x *userSaveServerStreamClient) Recv() (*SaveUserResponse, error) {
	m := new(SaveUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) SaveBiStream(ctx context.Context, opts ...grpc.CallOption) (User_SaveBiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_User_serviceDesc.Streams[2], "/testdb.User/SaveBiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userSaveBiStreamClient{stream}
	return x, nil
}

type User_SaveBiStreamClient interface {
	Send(*SaveUserRequest) error
	Recv() (*SaveUserResponse, error)
	grpc.ClientStream
}

type userSaveBiStreamClient struct {
	grpc.ClientStream
}

func (x *userSaveBiStreamClient) Send(m *SaveUserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userSaveBiStreamClient) Recv() (*SaveUserResponse, error) {
	m := new(SaveUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	Save(context.Context, *SaveUserRequest) (*SaveUserResponse, error)
	SaveClientStream(User_SaveClientStreamServer) error
	SaveServerStream(*SaveUserRequest, User_SaveServerStreamServer) error
	SaveBiStream(User_SaveBiStreamServer) error
}

// UnimplementedUserServer can be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (*UnimplementedUserServer) Save(ctx context.Context, req *SaveUserRequest) (*SaveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (*UnimplementedUserServer) SaveClientStream(srv User_SaveClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveClientStream not implemented")
}
func (*UnimplementedUserServer) SaveServerStream(req *SaveUserRequest, srv User_SaveServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveServerStream not implemented")
}
func (*UnimplementedUserServer) SaveBiStream(srv User_SaveBiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveBiStream not implemented")
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdb.User/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Save(ctx, req.(*SaveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SaveClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).SaveClientStream(&userSaveClientStreamServer{stream})
}

type User_SaveClientStreamServer interface {
	SendAndClose(*SaveUserResponse) error
	Recv() (*SaveUserRequest, error)
	grpc.ServerStream
}

type userSaveClientStreamServer struct {
	grpc.ServerStream
}

func (x *userSaveClientStreamServer) SendAndClose(m *SaveUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userSaveClientStreamServer) Recv() (*SaveUserRequest, error) {
	m := new(SaveUserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _User_SaveServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SaveUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServer).SaveServerStream(m, &userSaveServerStreamServer{stream})
}

type User_SaveServerStreamServer interface {
	Send(*SaveUserResponse) error
	grpc.ServerStream
}

type userSaveServerStreamServer struct {
	grpc.ServerStream
}

func (x *userSaveServerStreamServer) Send(m *SaveUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _User_SaveBiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).SaveBiStream(&userSaveBiStreamServer{stream})
}

type User_SaveBiStreamServer interface {
	Send(*SaveUserResponse) error
	Recv() (*SaveUserRequest, error)
	grpc.ServerStream
}

type userSaveBiStreamServer struct {
	grpc.ServerStream
}

func (x *userSaveBiStreamServer) Send(m *SaveUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userSaveBiStreamServer) Recv() (*SaveUserRequest, error) {
	m := new(SaveUserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testdb.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _User_Save_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SaveClientStream",
			Handler:       _User_SaveClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SaveServerStream",
			Handler:       _User_SaveServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SaveBiStream",
			Handler:       _User_SaveBiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "testdb.proto",
}

// Copyright 2020. feat.Me Networks. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: schema.proto

package schemapb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Database struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Database) Reset()         { *m = Database{} }
func (m *Database) String() string { return proto.CompactTextString(m) }
func (*Database) ProtoMessage()    {}
func (*Database) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{0}
}

func (m *Database) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Database.Unmarshal(m, b)
}
func (m *Database) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Database.Marshal(b, m, deterministic)
}
func (m *Database) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Database.Merge(m, src)
}
func (m *Database) XXX_Size() int {
	return xxx_messageInfo_Database.Size(m)
}
func (m *Database) XXX_DiscardUnknown() {
	xxx_messageInfo_Database.DiscardUnknown(m)
}

var xxx_messageInfo_Database proto.InternalMessageInfo

func (m *Database) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateDatabaseResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage         string   `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateDatabaseResponse) Reset()         { *m = CreateDatabaseResponse{} }
func (m *CreateDatabaseResponse) String() string { return proto.CompactTextString(m) }
func (*CreateDatabaseResponse) ProtoMessage()    {}
func (*CreateDatabaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{1}
}

func (m *CreateDatabaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateDatabaseResponse.Unmarshal(m, b)
}
func (m *CreateDatabaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateDatabaseResponse.Marshal(b, m, deterministic)
}
func (m *CreateDatabaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDatabaseResponse.Merge(m, src)
}
func (m *CreateDatabaseResponse) XXX_Size() int {
	return xxx_messageInfo_CreateDatabaseResponse.Size(m)
}
func (m *CreateDatabaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDatabaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDatabaseResponse proto.InternalMessageInfo

func (m *CreateDatabaseResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *CreateDatabaseResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type DescribeDatabaseResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DescribeDatabaseResponse) Reset()         { *m = DescribeDatabaseResponse{} }
func (m *DescribeDatabaseResponse) String() string { return proto.CompactTextString(m) }
func (*DescribeDatabaseResponse) ProtoMessage()    {}
func (*DescribeDatabaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{2}
}

func (m *DescribeDatabaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DescribeDatabaseResponse.Unmarshal(m, b)
}
func (m *DescribeDatabaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DescribeDatabaseResponse.Marshal(b, m, deterministic)
}
func (m *DescribeDatabaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeDatabaseResponse.Merge(m, src)
}
func (m *DescribeDatabaseResponse) XXX_Size() int {
	return xxx_messageInfo_DescribeDatabaseResponse.Size(m)
}
func (m *DescribeDatabaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeDatabaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeDatabaseResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Database)(nil), "io.agoradb.Database")
	proto.RegisterType((*CreateDatabaseResponse)(nil), "io.agoradb.CreateDatabaseResponse")
	proto.RegisterType((*DescribeDatabaseResponse)(nil), "io.agoradb.DescribeDatabaseResponse")
}

func init() { proto.RegisterFile("schema.proto", fileDescriptor_1c5fb4d8cc22d66a) }

var fileDescriptor_1c5fb4d8cc22d66a = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0xce, 0x48,
	0xcd, 0x4d, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xca, 0xcc, 0xd7, 0x4b, 0x4c, 0xcf,
	0x2f, 0x4a, 0x4c, 0x49, 0x52, 0x92, 0xe3, 0xe2, 0x70, 0x49, 0x2c, 0x49, 0x4c, 0x4a, 0x2c, 0x4e,
	0x15, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02,
	0xb3, 0x95, 0xc2, 0xb8, 0xc4, 0x9c, 0x8b, 0x52, 0x13, 0x4b, 0x52, 0x61, 0xaa, 0x82, 0x52, 0x8b,
	0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x24, 0xb8, 0xd8, 0x8b, 0x4b, 0x93, 0x93, 0x53, 0x8b, 0x8b,
	0xc1, 0x1a, 0x38, 0x82, 0x60, 0x5c, 0x21, 0x25, 0x2e, 0x9e, 0xd4, 0xa2, 0xa2, 0xfc, 0x22, 0xdf,
	0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0x09, 0x26, 0xb0, 0x79, 0x28, 0x62, 0x4a, 0x52, 0x5c, 0x12,
	0x2e, 0xa9, 0xc5, 0xc9, 0x45, 0x99, 0x49, 0x18, 0x26, 0x1b, 0xad, 0x60, 0xe4, 0x62, 0x0b, 0x06,
	0x3b, 0x58, 0xc8, 0x87, 0x8b, 0x0f, 0xd5, 0x7a, 0x21, 0x11, 0x3d, 0x84, 0xeb, 0xf5, 0x60, 0xa2,
	0x52, 0x4a, 0xc8, 0xa2, 0xd8, 0x1d, 0xac, 0xc4, 0x20, 0x14, 0xc0, 0x25, 0x80, 0x6e, 0x29, 0x0e,
	0xf3, 0x54, 0x50, 0x44, 0x71, 0x38, 0x54, 0x89, 0xc1, 0x89, 0x23, 0x8a, 0x0d, 0x12, 0xb4, 0x49,
	0x6c, 0xe0, 0xb0, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x91, 0xc4, 0xbe, 0x6b, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SchemaClient is the client API for Schema service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchemaClient interface {
	CreateDatabase(ctx context.Context, in *Database, opts ...grpc.CallOption) (*CreateDatabaseResponse, error)
	DescribeDatabase(ctx context.Context, in *Database, opts ...grpc.CallOption) (*DescribeDatabaseResponse, error)
}

type schemaClient struct {
	cc *grpc.ClientConn
}

func NewSchemaClient(cc *grpc.ClientConn) SchemaClient {
	return &schemaClient{cc}
}

func (c *schemaClient) CreateDatabase(ctx context.Context, in *Database, opts ...grpc.CallOption) (*CreateDatabaseResponse, error) {
	out := new(CreateDatabaseResponse)
	err := c.cc.Invoke(ctx, "/io.agoradb.Schema/CreateDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaClient) DescribeDatabase(ctx context.Context, in *Database, opts ...grpc.CallOption) (*DescribeDatabaseResponse, error) {
	out := new(DescribeDatabaseResponse)
	err := c.cc.Invoke(ctx, "/io.agoradb.Schema/DescribeDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemaServer is the server API for Schema service.
type SchemaServer interface {
	CreateDatabase(context.Context, *Database) (*CreateDatabaseResponse, error)
	DescribeDatabase(context.Context, *Database) (*DescribeDatabaseResponse, error)
}

// UnimplementedSchemaServer can be embedded to have forward compatible implementations.
type UnimplementedSchemaServer struct {
}

func (*UnimplementedSchemaServer) CreateDatabase(ctx context.Context, req *Database) (*CreateDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabase not implemented")
}
func (*UnimplementedSchemaServer) DescribeDatabase(ctx context.Context, req *Database) (*DescribeDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeDatabase not implemented")
}

func RegisterSchemaServer(s *grpc.Server, srv SchemaServer) {
	s.RegisterService(&_Schema_serviceDesc, srv)
}

func _Schema_CreateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Database)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaServer).CreateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.agoradb.Schema/CreateDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaServer).CreateDatabase(ctx, req.(*Database))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schema_DescribeDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Database)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaServer).DescribeDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.agoradb.Schema/DescribeDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaServer).DescribeDatabase(ctx, req.(*Database))
	}
	return interceptor(ctx, in, info, handler)
}

var _Schema_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.agoradb.Schema",
	HandlerType: (*SchemaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDatabase",
			Handler:    _Schema_CreateDatabase_Handler,
		},
		{
			MethodName: "DescribeDatabase",
			Handler:    _Schema_DescribeDatabase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.proto",
}
